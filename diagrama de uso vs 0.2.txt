
Na primeira vez que o usuario entrar no APP, pedir para realizar cadastro.

	Exibir campos abaixo pra preenchimento:
	-nome_usuario
   	-cpf
    	-email
   	-codigo_ddd
    	-numero_telefone 

	Chamar API criacao usuario
		Endpoint: /usuarios (método Post)  Ex body:
			{
    			"nome_usuario": "fulano de tal3",
    			"cpf": "891344234",
    			"email": "test3@test",
    			"codigo_ddd": "021",
    			"numero_telefone": "1498173234"    
 			}

Após criação do usuário, oferecer ao usuário, as seguinte opções:

	1 - Criar Grupo Novo  (normalmente só o adm irá entrar nessa opção)
		Exibir campos abaixo pra preenchimento
			-nome_grupo     
  			-descricao_grupo

		Chamar API criação de Grupo
			EndPoint: /grupo   (método Post) Ex. Body:
			{
   			 "id_criador": 1,
    			"nome_grupo": "KFC",
    			"descricao_grupo":"jogo semanal GLT"
			}
		O grupo é criado na tabela "Grupo".

		Ao criar um grupo, o criador automaticamente se torna o administrador do Grupo e é inserido na tabela "Grupo_Usuario". A lista dos membros de cada grupo ocorre na tabela "Grupo_Usuario". 	
		

	2 - Entrar em Grupo Existente
		Exibir campo para pesquisa do Grupo. Exibir campo para preenchimento do grupo desejado (nome ou parte do nome).
		Chamar API pesquisa de Grupos. Caso não encontre nenhum grupo, retornar "Grupo não encontrado".
		Endpoint: /grupo/{nomeGrupo}   (método Get)
		
		Após usuário selecionar o grupo desejado.
		Chamar a API criação GrupoUsuario
		EndPoint:	/grupoUsuario	(método Post)   Campo "eh_administrador" deve receber "false".
		Ex. Body:
			{
    			"id_grupo": 1 ,
    			"id_usuario": 2,
    			"eh_administrador": false
			}
		Se inscrição ok, retornar "Inscrição efetuada com Sucesso", caso contrário "Erro na inscrição, tentar novamente mais tarde".
	
	Para remover um usuário de um determinado Grupo, chamar a API: 
		EndPoint: /grupoUsuario/{id_grupo}/{id_usuario}   método delete	

	3 - Criação e Gerenciamento de Jogos

	Nas entradas recorrentes, exibir tela com o(s) grupo(s) (já por default no app) e próximos jogos do usuário.

	Para o administrador, exibir uma opção de "Agendar jogo". Ao clicar nessa opção:
	- exibir calendario/relógio para marcação do dia/horário do jogo.
	- exibir campo para descrição do jogo.
	- Chamar a API criação de jogo.  Atenção: enviar data no formato: "YYYY-MM-DD" e horário no formato: "HH:MI", sendo HH de 00 a 23
		Endpoint: /jogos	(método Post)  Ex: do Body:
		
		 {
    			"id_grupo": 1,
    			"data_jogo": "2024-01-16",
    			"horario_jogo": "18:00",
    			"descricao_jogo":"futebol no D.Pedro"
 		 }

Para todos os usuários, exibir os jogos marcados e jogadores da partida.
	- chamar a API que busca os jogos agendados futuros. Retorna os jogos agendados (futuros)
			Endpoint: /jogos/{id_grupo}   (método Get)

	- chamar a API consultar JogoUsuarios, que exibe os jogadores e respectivos status de cada usuário para determinado jogo. Pode haver inúmeros jogos, conforme retorno da API anterior.
		Endpoint: /jogosusuarios/{id_jogo}  (método Get)

	- chamar a API de definição status JogoUsuarios para que cada usuário possa escolher confirmar ou desconfirmar sua presença no jogo:
		Endpoint: /jogosusuarios/{id_jogo}/{id_usuario}/{true}   (método put)

Para inserir um convidado, existe o Endpoint abaixo:

Endpoint: /convidado 
Ex de Body:
{
    "id_jogos_grupo": 7,
    "id_usuario": -5,
    "nome_convidado": "MarcosNakaya",
    "notas": "0"
}
Em id do usuário pode colocar qquer numero negativo. Precisa ser negativo só para não ficar igual ao da tabela de "Usuarios".

Caso se deseje ver apenas os convidados, chamar o endpoint abaixo:
Endpoint: /convidado/(id_jogo)

Para desconfirmar um convidado, deve-se apagar o mesmo usando a API abaixo:
Endpoint:	/convidado/{id_usuario}  método Delete.




Modelo de dados:
Tabela Grupo deve ter uma chave estrangeira refenciando o Id da tabela Usuario
Tabela Grupo Usuário deve ter uma chave entrangeira referenciando o Id da tabela Usuario
Tabela Grupo Usuário deve ter uma chave entrangeira referenciando o Id da tabela Grupo
Tabela Jogos_Grupo deve ter uma chave entrangeira referenciando o ID da tabela Grupo
Tabela Jogos_Usuarios deve ter uma chave entrangeira referenciando o ID da tabela Usuario
Tabela Jogos_Usuarios deve ter uma chave entrangeira referenciando o ID da tabela Jogos_Grupo


Notas:
A data de criação de registros nas tabelas está sendo armazenada como UTC (não é local). Logo, se for exibir precisamos alterar para o horário local.
Já o horário agendado de jogos está com horário local.


Script de Instalação:

- Baixar projeto do Git

- configurar conexoes com banco de dados PostGreSQL
	https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql

- Criar tabelas no PostGreSQL, executando o comando abaixo:
	npm install prisma --save-dev
	npm install @prisma/client
	npx prisma init
	npx prisma migrate dev --name init

- swaggers estão em: http://localhost:3000/api
	




